column_to_rownames("species")
dat_lm1
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=family)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="red") +
theme_bw() +
theme(legend.position = "none")
dat_lm1 %>%
ggplot(aes(x=svl, y=TL)) +
geom_point(aes(color=family)) +
#  geom_smooth(method = "lm") +
geom_abline(slope=mod_tmp$coefficients[,1][2],
intercept = mod_tmp$coefficients[,1][1], col="black") +
theme_bw() +
theme(legend.position = "none")
### mod specs
mod1<-phylolm(dat=dat_lm1, phy=phy, method="lambda",
TL~egg_area)
summary(mod1)
shapiro.test(mod1$residuals) ### problematic
summary(mod1)
### stepwise model selection
mod_step1<-phylostep(dat=dat_scaled, phy=phy, method="lambda", direction="both",
TL~egg_area+svl+spawning_cat)
### stepwise model selection
mod_step1<-phylostep(dat=dat_lm1, phy=phy, method="lambda", direction="both",
TL~egg_area+svl+spawning_cat)
summary(mod_step1)
library(AmphiNom, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
aswSearch("Bufo bufo")
library(AmphiNom)
asw_taxonomy_2023<-getTaxonomy()
aswSearch("Bufo bufo")
library("rjson")
# Passing argument files
myData <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
print(json_data_frame)
myData[1]
myData[[1]]
myData[[1]]
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
View(json_data_frame)
myData[[1]]
myData[[2]]
# Convert JSON file to dataframe.
json_data_frame <- as.data.frame(myData)
library("tidyverse")
df<-bind_rows(myData)
View(df)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
function (x, df1, df2, ncp, log = FALSE)
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
# load file. you could even try to pass the url directly, instead of saving it.
raw_data <- fromJSON(file="~/Desktop/test.json")
# Convert JSON file to dataframe.
df<-bind_rows(raw_data)
View(raw_data)
View(df)
# convert "," to "."
df<-read_csv2(df)
View(df)
# convert "," to "."
df2<-type_convert(df)
View(df2)
# convert "," to "."
df2<-type_convert(df, local="us")
# convert "," to "."
df2<-type_convert(df, locale="us")
# convert "," to "."
df2<-type_convert(df, locale=locale("us"))
# convert "," to "."
df2<-type_convert(df, locale=locale("es", decimal_mark = ","))
View(df2)
View(df2)
View(df2)
df2 %>%
select(fecha, is.numeric())
df2 %>%
select_if(is.numeric)
df2 %>%
select_if(is.numeric, "fecha")
df2 %>%
select(is.numeric, fecha)
df2 %>%
select(is.numeric(.), fecha)
# convert "," to "." and "Varias" to NA
df2<-type_convert(df, locale=locale("es", decimal_mark = ","),na = "Varias")
df2
df2 %>%
select(-c(indicativo,nombre, provincia))
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
pivot_longer(-)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
pivot_longer(-fecha)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.Date)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.numeric.POSIXt() )
select_if(is.numeric,is.numeric.POSIXt
df2 %>%
df2
class(df2$horatmin)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.difftime)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric,is.numeric.difftime)
df2 %>%
select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.difftime)
df2 %>%
#select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric.difftime)
df2 %>%
#select(-c(indicativo,nombre, provincia)) %>%
group_by(fecha) %>%
select_if(is.numeric)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
facet_wrap(~name)
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point() +
geom_line() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y")
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y") +
theme_bw
df2 %>%
group_by(fecha) %>%
select_if(is.numeric) %>%
pivot_longer(-fecha) %>%
ggplot(aes(x=fecha, y=value)) +
geom_point(size=0.5) +
geom_line() +
facet_wrap(~name, scales = "free_y") +
theme_bw()
test<-fromJSON("https://filesamples.com/samples/code/json/sample1.json")
"https://filesamples.com/samples/code/json/sample1.json"
c<-"https://filesamples.com/samples/code/json/sample1.json"
test<-fromJSON(c)
test<-fromJSON("~/Downloads/sample1.json")
source("~/json_to_df.R")
devtools::install_github("ropensci/rAltmetric")
library(rAltmetric)
altmetrics(doi = "10.1038/465860a")
etOption("altmetricKey")
GetOption("altmetricKey")
getOption("altmetricKey")
4+4
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
install.packages("tidyverse", repos = "https://cran.rstudio.com/")
install.packages("tidyverse",repos ="https://cran.rstudio.com/")
install.packages("tidyverse", repos = "https://cran.rstudio.com/")
library(tidyverse)
mpg
nrow(mpq)
nrow(mpg)
mpg %>% nrow()
mpg %>%
subset(manufacturer=="audi") %>%
nrow()
mpg %>%
filter(manufacturer=="audi") %>% # specify rows to keep
select(manufacturer, model, year) %>% # specify coloumns to keep
arrange(year) # specify row order based on column values
mpg %>%
summarise(mean=mean(year))
mpg %>%
summarise_all()
mpg %>%
summarise_all(mean)
mpg %>%
summarise_if(is.numeric, mean)
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
mpg %>%
group_by(manufacturer) %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
mpg %>%
group_by(manufacturer)
mpg2<-mpg %>%
group_by(manufacturer)
mpg2 %>%
summarise(mean(year))
mpg2 %>%
ungroup()
plot()
ggplot()
plot(x=mpg$cty, y=mpg$hwy)
mpg %>%
ggplot(mapping = aes(x=cty, y=hwy))
mpg %>%
ggplot(mapping = aes(x=cty, y=hwy)) +
geom_point()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_boxplot()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) %>%
geom_boxplot()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_boxplot()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_boxplot() +
geom_point()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
geom_point()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
geom_point(size=1)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
geom_point(size=0.5)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
geom_point(size=0.5, alpha=0.5)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
geom_point(size=1, alpha=0.5)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
#geom_point(size=1, alpha=0.5)
geom_jitter()
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin() +
#geom_point(size=1, alpha=0.5)
geom_jitter(width=0.1)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin(fill="green") +
#geom_point(size=1, alpha=0.5)
geom_jitter(width=0.1)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin(aes(fill=manufacturer)) +
#geom_point(size=1, alpha=0.5)
geom_jitter(width=0.1)
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin(aes(fill="#857463")) +
#geom_point(size=1, alpha=0.5)
geom_jitter(width=0.1)
mpg
mpg %>%
ggplot(mapping = aes(x=manufacturer, y=hwy)) +
geom_violin(fill="#875654") +
#geom_point(size=1, alpha=0.5)
geom_jitter(width=0.1)
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(tidyverse, limma)
p_load(tidyverse, edgeR)
p_load(tidyverse, pheatmap)
p_load(here)
here()
here()
here()
getwd()
txi<-readRDS("./data/salmon_gene_counts.rds")
getwd()
setwd("~/Documents/git_projects/PoE23_rnaseq/")
txi<-readRDS("./data/salmon_gene_counts.rds")
str(txi)
str(txi)
txi$counts
txi$counts %>% head()
txi$abundace %>% head()
txi$abundance %>% head()
txi$abundance %>% rowSums()
txi$abundance %>% colSums()
samples<-read.csv("./data/design_matrix.csv")
samples
txi$abundance
tpm<-txi$abundance %>%
as.data.frame() %>%
filter_all(any_vars(. != 0))
txi$abundance %>%
nrow()
pca<- prcomp(t(tpm),scale.=T, center=T)
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
labs(x=paste0("PC1 (", summary(pca)$importance["Proportion of Variance",1]*100, "%)"),
y=paste("PC2 (", summary(pca)$importance["Proportion of Variance",2]*100, "%)")) +
geom_point(size=3)
samples
pca$x %>%
as_tibble(rownames = "sample_id") %>%
left_join(samples) %>% # add the experimental design information
ggplot(aes(x=PC1, y=PC2, color=treatment, shape=tissue)) +
labs(x=paste0("PC1 (", summary(pca)$importance["Proportion of Variance",1]*100, "%)"),
y=paste("PC2 (", summary(pca)$importance["Proportion of Variance",2]*100, "%)")) +
geom_point(size=3) +
geom_label(aes(label=sample_id))
samples <- samples %>%
filter(tissue=="skin") %>%
mutate(condition=as.factor(paste(treatment, side, sep="_")))
samples
txi$abundance
txi$abundance %>% head()
samples$sample_id
txi$abundance<-txi$abundance[,samples$sample_id]
txi$counts<-txi$counts[,samples$sample_id]
txi$length<-txi$length[,samples$sample_id]
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
p_load(DESeq2)
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ condition)
dds
counts(dds)
dds <- dds[rowSums(counts(dds)) >= 10,]
dds <- DESeq(dds)
dds
resultsNames(dds)
res<-results(dds)
res
results(dds, contrast=c("condition","white_dorsal","black_dorsal"))
results(dds, contrast=c("condition","white_dorsal","black_dorsal")) %>% summary()
results(dds, contrast=c("condition","white_dorsal","black_dorsal"), alpha=0.05) %>% summary()
# white dorsal vs white ventral
res_wD_wV<-results(dds, contrast=c("condition","white_dorsal","white_ventral"))
# black dorsal vs black ventral
res_bD_bV<-results(dds, contrast=c("condition","black_dorsal","black_ventral"))
# black dorsal vs white dorsal
res_bD_wD<-results(dds, contrast=c("condition","black_dorsal","white_dorsal"))
# black ventral vs white ventral
res_bV_wV<-results(dds, contrast=c("condition","black_ventral","white_ventral"))
res_bD_wD
summary(res_bD_wD)
summary(res_bD_bV)
summary(res_wD_wV)
res<-readRDS("./results/deseq2_results.rds")
res
xtrop<-read_csv("./data/PCU23_annotations_xtr105.csv")
xtrop %>% head()
xtrop<-read_csv("data/PCU23_annotations_xtr105_genes.csv")
xtrop %>% head()
xtrop %>% head(20)
xtrop$gene_id
gg_res <- res %>%
lapply(as_tibble,rownames = "gene_id") %>%
bind_rows(.id="comparison") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig,
text=paste0("</br>Pcu23 gene: ", gene_id,
"</br>Pcu23 peptide: ", pep_description,
"</br>X.tr peptide: ", xtr_pep_name_x
)
)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~comparison, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
theme(legend.position = "none")
gg_res
p_load(plotly)
ggplotly(gg_res, tooltip = text)
ggplotly(gg_res, tooltip = "text")
mpg %>%
ggplot(aes(x=cty, y=hwy)) +
geom_point()
plot1<-mpg %>%
ggplot(aes(x=cty, y=hwy)) +
geom_point()
ggplotly(plot1)
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text(aes(text=gene_id)) +
xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text(aes(label=gene_id)) +
xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data=. %>% filter(sig),
aes(label=xtr_pep_name_x),
max.overlaps = 50,
size=2) +  xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
p_load(ggrepel)
res$bD_wD %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
#filter(padj<0.99) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(xtrop, by=c("gene_id")) %>% # add annotations
filter(padj<0.5) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data=. %>% filter(sig),
aes(label=xtr_pep_name_x),
max.overlaps = 50,
size=2) +  xlim(-10,10) +
ggtitle("DEGs in Black Dorsal Skin in Comparison to White Dorsal Skin") +
theme_bw() +
theme(legend.position = "none")
