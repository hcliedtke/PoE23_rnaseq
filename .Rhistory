# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
# Chunk 2
# set working directory
setwd("~/Documents/teaching/principals_of_evolution23/PoE23_rnaseq")
# set working directory
setwd("~/Documents/git_projects/PoE23_rnaseq")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE)
knitr::opts_knit$set(root.dir = '../')
library(webexercises)
# Chunk 2
# set working directory
setwd("~/Documents/git_projects/PoE23_rnaseq")
#setwd("~/Documents/teaching/principals_of_evolution23/PoE23_rnaseq")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse, DESeq2)
# Chunk 3
p_load(tidyverse)
mgp
mpg
nrow(mpg)
# take a look at this dataset
mpg
# to count how many rows are in this dataset, we could use `nrow()`
nrow(mpg)
mpg %>% nrow()
# to count how many rows with "audi" as the manufaturer are in this dataset, we could use `nrow()` combined with `subset()`:
subset(mpg, manufacturer=="audi")
# say we want to count how many rows have "audi" as the manufaturer are in this dataset. We could  do a series of individual operations, always saving the output like so:
#1. subset all rows with audi
audi<-subset(mpg, manufacturer=="audi")
#2. count rows
nrow(audi)
# we can of course put it all together as a series of nested functions like this:
nrow(subset(mpg, manufacturer=="audi"))
mpg %>%
subset(manufacturer=="audi")
mpg %>%
subset(manufacturer=="audi") %>%
nrow()
mpg %>%
subset(manufacturer=="audi", select=model)
mpg %>%
filter(manufacturer=="audi") %>%
select(manufacturer, model, year)
mpg %>%
filter(manufacturer=="audi") %>%
select(manufacturer, model, year) %>%
arrange(year)
mpg
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=mean(cty,hwy))
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=mean(c(cty,hwy)))
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=rowMeans(c(cty,hwy)))
# lets calculate an average fuel consumption for city and highway driving
mpg %>%
mutate(avg_consumption=(cty+hwy)/2)
# mean manufacturing year:
mpg %>%
mean(year)
# mean manufacturing year:
mpg %>%
summarise(mean=mean(year))
mpg %>%
summarise_if(is.numeric, mean)
mgp %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
mpg %>%
summarise(mean_cty=mean(cty),
sd_cty=sd(cty))
mpg %>%
group_by(manufacturer)
mpg %>%
group_by(manufacturer) %>%
summarise_if(is.numeric, mean)
df1<-mpg %>%
select(-c(cty, hyw, fl, class))
df1<-mpg %>%
select(-c(cty, hwy, fl, class))
df1
df2<-mpg %>%
filter(str_detect(trans, "manual"))
df2
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy, fl, class)) %>%
filter(str_detect(trans, "manual"))
df1
df1 %>%
left_join(mpg)
select(-c(cty, hwy) %>%
df1
# our manual data subset
df1<-mpg %>%
select(-c(cty, hwy)) %>%
filter(str_detect(trans, "manual"))
df1
df1 %>%
left_join(mpg)
mpg %>%
pivot_wider(names_from=manufacturer, values_from = model)
mpg %>%
pivot_wider(names_from=model, values_from = cty)
iris
iris %>% as_tibble()
iris %>%
group_by(Species) %>%
pivot_longer(names_to = "trait", values_to = "length")
iris %>%
pivot_longer(-Species, names_to = "trait", values_to = "length")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot() %>%
theme_bw()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot() +
theme_bw()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy),
fill="blue") +
geom_boxplot()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy),
colour="blue") +
geom_boxplot()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy)) +
geom_boxplot(fill="blue")
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot() +
theme_dark()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot() +
theme_classic()
ggplot(data=mpg,
mapping=aes(x=manufacturer, y=hwy, fill=manufacturer)) +
geom_boxplot() +
## apply a canned theme
theme_classic() +
## edit the theme by e.g. removing the legend
theme(legend.position = "none")
